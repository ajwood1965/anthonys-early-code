{////////////////////////////////////////////////////////////////////}
{////////////////////////////////////////////////////////////////////}
{/////								/////}
{/////				Boot Epprom			/////}
{/////				for AD0516			/////}
{////////////////////////////////////////////////////////////////////}
{////////////////////////////////////////////////////////////////////}
.module/ram/abs=0/boot=0		BootProm;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.port		ModeSel;	{3000W}
.port		Bank;		{3004W}
.port		SmpteData;	{2004R}
.port		Status;		{2006R}
.port		Read68;		{2008R}
.port		Write68;	{300AW}
.port		Interupt68;	{300cW}
.port		ReadFIFO;	{200eR}
.port		WriteFIFO;	{300eW}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.global		Status	,Read68;
.external	LoadCode,WaitRead;
.entry		Begin;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.var/pm/ram/abs=0x03f0 Sware;
.var/pm/ram/abs=0x03f1 EprmRev;
.var/pm/ram/abs=0x03f2 BoardRev;
.var/pm/ram/abs=0x03f3 Flags;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.init EprmRev: 0x000100;
{++++++++++++++++++++++++}
{++++++++++++++++++++++++}
.init BoardRev: 0x010000;
{ Board Revision 0xbb.bbcd   b=board revision c=AutoConfigpal(U15) rev  d=pal1(U24) rev}
{++++++++++++++++++++++++}
.init Flags: 0x00000F;
{memory     bits  0-4       1=8k  4=32k  F=128k}
{           bits 5-23     unused}
{++++++++++++++++++++++++}
.init Sware: 0x010000;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.const		REC_FIFO_EMPTY=0x0040;
.const		PLAY_FIFO_HALF_FULL=0x0020;
.const		REC_FIFO_HALF_FULL=0x0010;
.const		AMIGAINT=0x0004;
.const		WRITEOK=0x0002;
.const		READOK=0x0001;
.const		IntStat=0x0004;
.const		SCLK=825;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.var/circ	CtrlIn[4];
.var/circ	CtrlOut[4];
.var/circ	DataIn[4];
.var/circ	DataOut[4];
.var/dm/ram	SUCmode;
.var/dm/ram	SerTest;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.var/dm/ram	VOLL;
.var/dm/ram	VOLR;
.var/dm/ram	RVOLL;
.var/dm/ram	RVOLR;
.var/dm/ram	MODE;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.var/pm/ram/circ Wave[256];
.init Wave: 

{****************** DSP SND  ******************}
{ 000 }       0*256, 18452*256, 30346*256, 32298*256, 25454*256, 13734*256,  1204*256, -9124*256,
{ 008 }  -16236*256,-20394*256,-22076*256,-21628*256,-19110*256,-14098*256, -6588*256,  3310*256,
{ 016 }   14280*256, 24208*256, 30916*256, 32690*256, 29356*256, 22150*256, 13092*256,  4308*256,
{ 024 }   -2710*256, -7472*256, -9510*256, -8932*256, -5600*256,   602*256,  9414*256, 19678*256,
{ 032 }   28654*256, 32756*256, 28556*256, 15354*256, -3410*256,-21248*256,-31578*256,-31264*256,
{ 040 }  -21778*256, -7668*256,  6292*256, 17358*256, 24410*256, 28306*256, 30034*256, 30422*256,
{ 048 }   29746*256, 27626*256, 23450*256, 16496*256,  6588*256, -5302*256,-17186*256,-26786*256,
{ 056 }  -32032*256,-32264*256,-28306*256,-21928*256,-15088*256, -9510*256, -5896*256, -4906*256,
{ 064 }   -6686*256,-11130*256,-17782*256,-25326*256,-31234*256,-32424*256,-26074*256,-11884*256,
{ 072 }    6882*256, 23728*256, 32348*256, 29830*256, 18034*256,  2008*256,-12908*256,-23658*256,
{ 080 }  -29746*256,-32210*256,-32758*256,-32702*256,-32714*256,-32748*256,-32114*256,-29746*256,
{ 088 }  -24476*256,-15710*256, -4010*256,  8932*256, 20628*256, 28848*256, 32530*256, 31990*256,
{ 096 }   28654*256, 24410*256, 20706*256, 18700*256, 18866*256, 21248*256, 25326*256, 29830*256,
{ 104 }   32652*256, 31014*256, 22736*256,  7764*256,-10468*256,-25952*256,-32714*256,-28050*256,
{ 112 }  -14280*256,  3110*256, 18368*256, 28154*256, 32332*256, 32480*256, 30814*256, 29128*256,
{ 120 }   28458*256, 29082*256, 30710*256, 32364*256, 32586*256, 29912*256, 23308*256, 12814*256,
{ 128 }       0*256,-12908*256,-23378*256,-29952*256,-32596*256,-32348*256,-30676*256,-29036*256,
{ 136 }  -28408*256,-29082*256,-30780*256,-32466*256,-32348*256,-28204*256,-18452*256, -3210*256,
{ 144 }   14188*256, 27998*256, 32720*256, 26012*256, 10562*256, -7668*256,-22664*256,-30982*256,
{ 152 }  -32660*256,-29870*256,-25390*256,-21324*256,-18948*256,-18782*256,-20784*256,-24476*256,
{ 160 }  -28704*256,-32012*256,-32518*256,-28800*256,-20550*256, -8834*256,  4108*256, 15798*256,
{ 168 }   24544*256, 29788*256, 32134*256, 32752*256, 32708*256, 32696*256, 32760*256, 32228*256,
{ 176 }   29788*256, 23728*256, 13000*256, -1908*256,-17950*256,-29788*256,-32364*256,-23798*256,
{ 184 }   -6982*256, 11790*256, 26012*256, 32410*256, 31264*256, 25390*256, 17866*256, 11226*256,
{ 192 }    6784*256,  5004*256,  5996*256,  9606*256, 15178*256, 22002*256, 28358*256, 32282*256,
{ 200 }   32012*256, 26728*256, 17102*256,  5204*256, -6686*256,-16584*256,-23520*256,-27680*256,
{ 208 }  -29788*256,-30458*256,-30074*256,-28358*256,-24476*256,-17442*256, -6390*256,  7570*256,
{ 216 }   21704*256, 31234*256, 31604*256, 21324*256,  3510*256,-15266*256,-28508*256,-32758*256,
{ 224 }  -28704*256,-19758*256, -9510*256,  -702*256,  5502*256,  8834*256,  9414*256,  7374*256,
{ 232 }    2610*256, -4408*256,-13184*256,-22224*256,-29400*256,-32696*256,-30882*256,-24140*256,
{ 240 }  -14188*256, -3210*256,  6686*256, 14188*256, 19192*256, 21704*256, 22150*256, 20472*256,
{ 248 }   16322*256,  9222*256, -1104*256,-13642*256,-25390*256,-32282*256,-30384*256,-18534;
{**********************************************}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.MACRO Wait(%0);
.LOCAL Wat;
	ar=%0;
	af=PASS ar;
Wat:	ar=DM(Status);
	ar=ar and af;
	if EQ jump Wat;
.ENDMACRO;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{////////////////////////////////////////////////////////////////////}
{/////			Interupt Vectors			/////}
{////////////////////////////////////////////////////////////////////}
Begin:	DIS SEC_REG;	ENA AR_SAT;	nop;		jump start;	{Reset Vector}
	rti;		rti;		rti;		rti;	{DATA AND SMPTE}
	rti;		rti;		rti;		rti;	{NA}
	rti;		rti;		rti;		rti;	{NA}
	jump setupcontrol;rti;		rti;		rti;	{Transmit}
ConV:	jump ConversInt;nop;		nop;		nop;	{Recieve}
	rti;		rti;		rti;		rti;	{Timer}

{////////////////////////////////////////////////////////////////////}
{/////			Start Execution				/////}
{////////////////////////////////////////////////////////////////////}
start:	call CntlReg_inits;	{ set up SPORTS, TIMER, etc }
	ar=DM(Read68);

	ar=0;DM(MODE)=ar;

	ar=0;
	DM(VOLL)=ar;
	DM(VOLR)=ar;

	call ModeOn;

	ax0=0x3fff;
	ay1=55;

	ay0=0;
	DM(VOLL)=ay0;
	cntr=0x3fff;
	DO Pan0 UNTIL CE;
		ay0=cntr;
		ar=ax0-ay0;
		DM(VOLL)=ar;
		ar=ay1;Call Delay;
Pan0:		nop;

	cntr=6;
	DO Pantimes UNTIL CE;
	cntr=0x3fff;
	DO Pan1 UNTIL CE;
		ay0=cntr;
		DM(VOLL)=ay0;
		ar=ax0-ay0;
		DM(VOLR)=ar;
		ar=ay1;Call Delay;
Pan1:		nop;

	cntr=0x3fff;
	DO Pan2 UNTIL CE;
		ay0=cntr;
		DM(VOLR)=ay0;
		ar=ax0-ay0;
		DM(VOLL)=ar;
		ar=ay1;Call Delay;
Pan2:		nop;
Pantimes:		nop;

	cntr=0x3fff;
	DO Pan3 UNTIL CE;
		ar=cntr;
		DM(VOLL)=ar;
		ar=ay1;Call Delay;
Pan3:		nop;


	ar=0;
	DM(VOLR)=ar;
	DM(VOLL)=ar;
	call ModeOff;

	ar=0x3fff;call Delay;
	ar=B#0010000100000100;DM(CtrlOut)  =ar;
	ar=B#0010001000000000;DM(CtrlOut+1)=ar;

	ar=0x3fff;call Delay;
	call ModeOn;
	ar=0x3fff;call Delay;
	call ModeOff;
	ar=1;DM(MODE)=ar;

{////////////////////////////////////////////////////////////////////}
{////////////////////////////////////////////////////////////////////}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
lop:
	ay0=READOK;
BSLoop:	ar=DM(Status);
	ar=ar and ay0;
	if EQ jump BSLoop;

	ar=DM(Read68);

	ay0=0x0045;
	af=ar-ay0;
	if EQ jump MonOn;

	ay0=0x0047;
	af=ar-ay0;
	if EQ jump MonOff;

	ay0=0x0043;
	af=ar-ay0;
	if EQ jump Poke;

	ay0=0x0041;
	af=ar-ay0;
	if EQ jump Peek;

	ay0=0x003d;
	af=ar-ay0;
	if EQ jump SendRev;

	ay0=0x003f;
	af=ar-ay0;
	if NE jump lop;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
NewCode:
	call ModeOff;

	imask=b#000000;
	m7=1;l7=0;
	Wait(READOK);
	ar=DM(Read68);
	i7=ar;
	Wait(READOK);
	ar=DM(Read68);
	CNTR=ar;
	jump LoadCode;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
MonOn:
	ar=B#0010000100101100;DM(CtrlOut)  =ar;
	ar=B#0010001000000000;DM(CtrlOut+1)=ar;
	ar=0x3fff;call Delay;
	call ModeOn;
	jump lop;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
MonOff:
{	call ModeOff;
	ar=0x3fff;call Delay;}
	ar=B#0010000100000100;DM(CtrlOut)  =ar;
	ar=B#0001001000000000;DM(CtrlOut+1)=ar;
	ar=0x3fff;call Delay;
	call ModeOn;
	ar=0x3fff;call Delay;
	call ModeOff;
	jump lop;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
Poke:	Wait(READOK);
	ar=DM(Read68);
	i7=ar;
	Wait(READOK);
	ar=DM(Read68);
	DM(i7,m7)=ar;
	jump lop;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
Peek:	Wait(READOK);
	ar=DM(Read68);
	i7=ar;
	Wait(WRITEOK);
	ar=DM(i7,m7);
	DM(Write68)=ar;
	jump lop;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
SendRev:
	ay1=WRITEOK;
	cntr=4;
	i7=0x03f0;

	do SPLoop UNTIL CE;
	ar=PM(I7,m5);

Waitt9:	ax1=DM(Status);
	af=ax1 and ay1;
	if EQ jump Waitt9;

	DM(Write68)=ar;

Waitt8:	ax1=DM(Status);
	af=ax1 and ay1;
	if EQ jump Waitt8;

	DM(Write68)=px;

SPLoop:	NOP;
	jump lop;
{////////////////////////////////////////////////////////////////////}
{/////								/////}
{////////////////////////////////////////////////////////////////////}
{////////////////////////////////////////////////////////////////////}
{/////								/////}
{////////////////////////////////////////////////////////////////////}
{////////////////////////////////////////////////////////////////////}
{/////								/////}
{////////////////////////////////////////////////////////////////////}
CntlReg_inits:
{++++++++++++++++}
	ax0=0;
	DM(ModeSel)=ax0;
{++++++++++++++++}
	L7=0;
	M5=1;
	I7=0x3fef;
{3fef}	DM(I7,M5)=B#0000001010000111; {0x0283}	{aport1 autobuffer cntrl reg}
{3ff0}	DM(I7,M5)=383;		{rfsdiv0}
{3ff1}	DM(I7,M5)=SCLK;		{sclkdiv0}
{3ff2}	DM(I7,M5)=B#0100000100011111; {sport1 cntr reg: internal sclk&rfs} {normal framing mode,} {frame sync not inverted} {16 bit word len}
	I7=0x3ffb;
{3ffb}	DM(I7,M5)=0x4000;	{TIMER TSCALE Scaling Registe}
{3ffc}	DM(I7,M5)=0x0001;	{TIMER TCOUNT Counting Regist}
{3ffd}	DM(I7,M5)=0xC000;	{TIMER TPERIOD Period Registe}
{3ffe}	DM(I7,M5)=0x1049;	{DM WAIT STATES one for each except 3000-3400}

	L0=4;		{* DATA IN}
	L1=4;		{* DATA OUT}
	L4=256;
	L7=0;

	M7=0;
	M0=0;
	M1=1;
	M4=0;
	M5=1;

	I4=^Wave;

	I1=^CtrlOut;
	{                     DFR   } {DEFAULT CONTROL PARMS}
	DM(I1,M1)=B#0010000100110100; {DCB=0,AC=1,DFR=5,ST=1,DF=0}
	DM(I1,M1)=B#0001001000000000; {MCK=2,FSEL=0,MS=1,TXDIS=0,ENL=0,ADL=0}
	DM(I1,M1)=B#0000000000000000; {pio=0}
	DM(I1,M1)=B#0000000000000000; {REVID=NC}

	I1=^DataOut;
	DM(I1,M1)=B#1100000000000000;	{OM0=1,OM1=1,L0=10,SM=0,R0=10}
	DM(I1,M1)=B#1100010111110101;	{PI0=11,OVR=0,IS=0,LG=5,MA=15,RG=5}
	DM(I1,M1)=0x0000;
	DM(I1,M1)=0x0000;

	rts;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
ModeOff:
	Call ControlMode;
	imask=b#000000;
	rts;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
ModeOn:	imask=b#000000;
	call DataMode;
	rts;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/}
{ \  /								\  / }
{  XX				Conversion			 XX  }
{ /  \								/  \ }
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
ConversInt:
{нннннннннннннннннннннннннннннннн}
	ENA SEC_REG;
	DM(DataOut+2)=ax0;{DAC_L} 
	DM(DataOut+3)=ax1;{DAC_R}
	ax0=DM(DataIn+2);{ADC_L}
	ax1=DM(DataIn+3);{ACC_R}
{нннннннннннннннннннннннннннннннн}
	ar=DM(MODE);
	ar=PASS ar;
	if NE jump skiptone;

	my0=PM(i4,m5);

	ar=DM(VOLL);
	sr=LSHIFT ar by 13 (LO);
	MR=sr1*my0 (US);
	ax0=mr1;

	ar=DM(VOLR);
	sr=LSHIFT ar by 13 (LO);
	MR=sr1*my0 (US);
	ax1=mr1;
skiptone:
{нннннннннннннннннннннннннннннннн}
	DIS SEC_REG;
	rti;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/}
{ \  /								\  / }
{  XX			Control/Data Mode			 XX  }
{ /  \								/  \ }
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
ControlMode:
	I7=0x3FFF;
	DM(I7,M4)=0x0418;	{SerialOff}

	ax0=0;
	DM(ModeSel)=ax0;
	rts;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.var/dm/ram	DMcntr;
DataMode:

	ar=0x00FF;Call Delay;

	I0=^CtrlIn;
	I1=^CtrlOut;

	ax0=DM(CtrlOut);
	ay1=B#1111101111111111;
	ar=ax0 and ay1;
	DM(CtrlOut)=ar;
	DM(SerTest)=ar;

	ax0=1;
	DM(SUCmode)=ax0;

	I7=0x3fef;
	l7=0;
{3fef}	DM(I7,M5)=B#0000001010000111; {0x0283}	{aport1 autobuffer cntrl reg}
{3ff0}	DM(I7,M5)=383;{383}		{rfsdiv0}
{3ff1}	DM(I7,M5)=SCLK;	{849;}		{sclkdiv0}
{3ff2}	DM(I7,M5)=B#0100000100011111; {sport1 cntr reg: internal sclk&rfs} {normal framing mode,} {frame sync not inverted} {16 bit word len}

	ICNTL=B#00000;
	IMASK=B#000100;		{only sport transmit int enabled}
	ax0=DM(I1,M1);		{send first 16 bits of ctrl word}
	TX1=ax0;

	I7=0x3fff;
{3fff}	DM(I7,M4)=0x0C18;	{system cntrl reg: sport 1 enabled}
{++++++++++++++++}
	ar=0x7F00; DM(DMcntr)=ar;

wait1:
	ay0=DM(DMcntr);
	ar=ay0-1;
	if EQ jump TransitionError;
	DM(DMcntr)=ar;

	IDLE;	{ Delay is needed so DMcntr does not overflow!!}
	ar=DM(SUCmode);
	ar=PASS ar;
	if NE jump wait1;
{++++++++++++++++}
GO_DMODE:
	ar=0x00FF;Call Delay;
	I0=^DataIn+2;
	I1=^DataOut+2;

	ax0=DM(I1,M1);TX1=ax0;
	ar=0xc18;DM(0x3FFF)=ar;
	IFC=B#000000111111;
	IMASK=B#000010;
	rts;

{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
TransitionError:
	ar=0x3FFF;Call Delay;
	ar=0x3FFF;Call Delay;
	call ControlMode;
	ar=0x00FF;Call Delay;
	ar=0x00FF;Call Delay;
	jump DataMode;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{ sport1 tx interrupt routine 					     }
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
SETUPCONTROL:
	ay1=^SUCJumpTable;
	ar=DM(SUCmode);
	ar=ar+ay1;
	I7=ar;
	jump (I7);
{ннннннннннннннннннннннннннннннннн}
SUCJumpTable:
	rti;			{0}
	jump SUCFirst;		{1}
	jump SUCWaitDCB0;	{2}
	jump SUCWaitDCB1;	{3}
{ннннннннннннннннннннннннннннннннн}
SUCFirst:
	ax0=2;
	DM(SUCmode)=ax0;
	rti;
{ннннннннннннннннннннннннннннннннн}
SUCWaitDCB0:
	ax0=DM(CtrlIn);			{DCB flag has not been set yet}
	ay1=DM(SerTest);
	ar=ax0 XOR ay1;			{same as we sent out?}
	if NE rti;			{set flag if DCB was 0}

	ax0=DM(CtrlOut);
	ay1=B#0000010000000000;		{set DCB back to 1 (TRANSFERS DATA!)}
	ar=ax0 or ay1;
	DM(CtrlOut)=ar;

	ax0=3;
	DM(SUCmode)=ax0;
	rti;
{ннннннннннннннннннннннннннннннннн}
SUCWaitDCB1:
	ax0=DM(CtrlIn);			{DCBFlag was set}
	ay1=B#0000010000000000;
	ar=ax0 AND ay1;			{only check for DCB bit}
	if EQ rti;			{if DCB=1 ready for datamode}

	IMASK=0;
	ax0=0x0418;			{disable sport1}
	DM(0x3FFF)=ax0;

	ax0=0x001f;
	DM(0x3ff2)=ax0;			{sport 1 cntrl: internal tfs, external sclk & rfs}
	ax0=1;
	DM(ModeSel)=ax0;		{set D/C high}

	ax0=0;
	DM(SUCmode)=ax0;
	rti;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
Delay:
	cntr=ar;
	DO DelayLp UNTIL CE;
DelayLp:	nop;
		rts;
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
{/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\}
{нннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннннн}
.endmod;

