
PSOUND.LIBRARY DOCS  REV 05/21/90  © 1990 Anthony J. Wood
=========================================================

"psound.library" is a standard sharable AmigaDos library for accessing the
Perfect Sound Hardware.  By using these library calls you have a much
better chance of remaining compatible with future hardware revisions.
The current library (versoin 1) only works with the Perfect Sound 3.0
hardware. However, new versions are planned that will support version 1,2,
or 3 hardware transparently to the application program.  We also are working
on new sound samplers.  By using the psound.library, your programs will
probably work with the new hardware by just changing to the revised
psound.library.

All the functions in psound.library expect to receive their parameters on
the stack.  If you are using 'C', they are already on the stack.  If you are
using assembly, you will need to push the arguments on the stack just like
you were making a call to a 'C' subroutine.  The library was written in about
75% assembly and 25% lattice 'C'.

When calling the library with a 'C' program, you will need to link in
ps_lib_stub.o.  This code will change a 'C' call to a library call.
"psound_lib_stub.o" was assembled with a68k, a PD assembler, and source
is included.

This release does not work with '020 or '030 cards.
---------------------------------------------------------------------

psound.library

int ps_monitor()
int ps_record()
void real_echo()
void real_delay()
void dec_gain()
void inc_gain()
int query_digi_type()
void set_plot_point()
int round_ss()
void set_vid_clock()
int get_sample()

#define  PS_2   0
#define  PS_3   1
#define  RIGHT  4
#define  LEFT   2
#define  STEREO 6

---------------------------------------------------------------------------
int ps_monitor(flags)
unsigned long flags;

Plays the sound being digitized by the Perfect Sound hardware using
flags=RIGHT or flags=LEFT.  Returns an error code, 0 means no error. No
other errors defined yet. The following keys are recognized:

<up arrow>   Increases the gain
<down arrow> Decreases the gain
<a>          Automatic gain adjustment
<g>          Graph On/Off

Clicking the left mouse button causes the monitor routine to exit.  Note
that some Amiga mouses will "bounce" quite a bit.  You may need to debounce
the left mouse button if you call the record routine right after monitor.

When graph is on, your function "plot_point()" will be called every 100
samples or so. The call format is:

plot_point(val)
long val;    /* one byte sample of current digitized value */

Your plot_point should draw a graph if you want one.  No calls will be made
until you use set_plot_point() to specify your routine.  Thus, if you don't
want to worry about graphing in the monitor mode, don't do anything.

All cpu cycles must be available.  If you have a screen open that limits
the cpu speed, you should open a one bit plane screen before calling
ps_record() or ps_monitor().

Call Disable()/Enable() around ps_monitor();

---------------------------------------------------------------------------
int ps_record(lp, rp, maxsize, speed, flags)

char *lp;      /* pointer to buffer for mono recordings, left for stereo */
char *rp;      /* pointer to right buffer for stereo recording */
long maxsize   /* maximum number of samples to digitize */
long speed;    /* specifies sample rate in samples per second */

Call Disable()/Enable() around this routine.  Will digitize until the left
mouse button is clicked or maxsize is reached. Returns the number of samples
digitized.

The speed is specified in samples per second.  However, not all speeds
are supported. Call round_ss() to find the actual digitizing rate.

All cpu cycles must be available.  If you have a screen open that limits
the cpu speed, you should open a one bit plane screen before calling
ps_record() or ps_monitor().

---------------------------------------------------------------------------
void real_echo(buffer,len)

char *buffer;     /** echo buffer ram **/
int len;          /** length of echo buffer **/

Digitizes from a Perfect Sound, adds echo, and sends to the Amiga
audio channel 0.  The sampling rate used is about 14,000 samples per
second.  Thus, a buffer length of 14,000 would give echos one second
apart.

---------------------------------------------------------------------------
void real_delay(buffer,len)

char *buffer;     /** delay buffer ram **/
int len;          /** length of echo buffer **/

Digitizes and shifts through buffer to channel 0.  Samples at 14,000
samples per second.  A 14,000 byte buffer would give a one second delay.

---------------------------------------------------------------------------
void inc_gain()

Increase the Perfect Sound digital gain.  There are 16 gain levels, and
if you increase at level 15, you roll over to level 0.  There is no way
to tell at what level the current gain is set.

Normally the user would adjust the gain while in monitor mode so he can
hear the changes.

---------------------------------------------------------------------------
void dec_gain()

Decrease the Perfect Sound digital gain.  If at 0, rolls to 15.

---------------------------------------------------------------------------
int query_digi_type()

Returns 1 if Perfect Sound 3.0 hardware. Returns 0 if less than 3.0
hardware. This function also tells psound.library's internal routines
which hardware is in use. Call query_digi_type() right after opening
the library.

---------------------------------------------------------------------------
void set_plot_point(val)

APTR val;

Tells ps_monitor() who to call to update the graph. Call before monitoring
if you want a real time graph during the monitor.

example:

main()
{
void plot_point();

set_plot_point(plot_point);
}

---------------------------------------------------------------------------
int round_ss(speed)

long speed;

Returns the closest speed the hardware can sample at given a desired speed.

---------------------------------------------------------------------------
void set_vid_clock(c1)
int c1;
{
Tells psound.library at what speed your Amiga is running.  If no call is
made, NTSC speeds are used.  If you are using PAL, you need to do a

set_vid_clock(3546895);    /* PAL C1 speed */

before using any of the other psound.library calls.

---------------------------------------------------------------------------
int get_sample()
{
Returns one sample from the digitizer. This function is relativly slow, so
it's probably not practical to sample sound using a loop like:

for (i=0; i<10000; i++)
   data[i]=get_sample();

Instead, use a call to ps_record();



