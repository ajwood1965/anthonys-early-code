{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;
\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\adjustright \f2\fs20\cgrid \sbasedon0 \snext15 Plain Text;}}{\*\listtable{\list\listtemplateid67698703\listsimple{\listlevel
\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid425658472}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid541013477}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1217668575}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1547763847}}{\*\listoverridetable{\listoverride\listid1217668575\listoverridecount0\ls1}{\listoverride\listid425658472
\listoverridecount0\ls2}{\listoverride\listid541013477\listoverridecount0\ls3}{\listoverride\listid1547763847\listoverridecount0\ls4}}{\info{\title Very Brief Micro Adventure Documentation}{\author Anthony J. Wood}{\operator Anthony J. Wood}
{\creatim\yr1998\mo1\dy4\hr11\min23}{\revtim\yr1998\mo1\dy4\hr11\min23}{\version2}{\edmins1}{\nofpages3}{\nofwords750}{\nofchars4279}{\*\company  }{\nofcharsws5254}{\vern89}}\widowctrl\ftnbj\aenddoc\formshade\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot 
\fet0\sectd \linex0\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \widctlpar\adjustright \fs20\cgrid {\b Very Brief Micro Adventure Documentation
\par }{1/4/98
\par Anthony J. Wood
\par ajw@best.com
\par 
\par }{\b Building an Adventure
\par }{To create an adventure with "Micro Adventure Creator" you need three files:
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {A "room data
" or /LOC file defines each room in the adventure.  It's description, obvious exits, and inventory items.  These files are created using "Electric Pencil".
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
An "Adventure Flow" or /ADV file.  This file contains the code in the Micro Adventure language that defines the logic of the game.  These files are created using "Electric Pencil".
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {A "title page
" or /TIT file defines a title screen for the adventure. These files are created using "ADVDRAW/BAS".
\par }\pard \widctlpar\adjustright {
\par Once you have created the three files that define your adventure, you run "MICROADV/BAS" to "compile" the adventure.  
\par 
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {Boot with NewDos/80
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {BASIC
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {Load "microadv/bas"
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {RUN
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 5.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {
Answer the first three questions, which tell it the location of the /LOC, /ADV, /TIT files.  
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 6.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {
Answer either "Y" or "N" to question: Display Tables?
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 7.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {Select option "3. Disk/Tape"
 when asked what kind of runtime to create.
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 8.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {MicroAdv the 
loads each file, parses them, and tokenizes them.
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 9.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {
If you displayed the tables, look at them, and then answer "Y" to the question "Save to Memory?".
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 10.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {
MicroAdv asks if you want any items to be initialized into the player's inventory.  These can be any NOUN.
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 11.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {Mi
croAdv now Pokes the tokenized adventure into high memory, and displays two sets of address.  The larger numbers define where the adventure now resides.  The smaller numbers display where the adventure needs to load into memory to run.
\par }\pard \widctlpar\adjustright {
\par Next, you can either run the adventure or  create a disk file that includes the machine code runtime code and the tokenized adventure.  Here are the steps:
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li405\widctlpar\jclisttab\tx405{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls3\adjustright {CMD "S" to return to DOS from BASIC.
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \fi-360\li405\widctlpar\jclisttab\tx405{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls3\adjustright {
Type "MOVE" to run MOVE/CMD.  This small program moves the tokenized adventure from its high memory locatio
n to its correct location for running.  At this point, you could run your adventure by just running the runtime code: DSKTAP/CMD.  This code will load just in front of the tokenized adventure, and will execute it.
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \fi-360\li405\widctlpar\jclisttab\tx405{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls3\adjustright {"DUMP filename/obj <start addr> <end addr>
" will saved the tokenized adventure into a file.  You get the starting and ending address from MicroAdv (the smaller range displayed when it finishes).
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard \fi-360\li405\widctlpar\jclisttab\tx405{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls3\adjustright {
Now you need to merge the runtime with the tokenized adventure into a single executable.  This is done 
using "CMDFILE", a program that came with ZBASIC.  When running CMDFILE, load two files off of disk:  "dsktap/cmd" and "filename/obj".  Use 5200H as the starting address.  Save it to disk with any filename/CMD.  You can download CMDFILE off of the Net.

\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 5.\tab}}\pard \fi-360\li405\widctlpar\jclisttab\tx405{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls3\adjustright {You're done!  Run the adventure by typing fil
ename/CMD.
\par }\pard \widctlpar\adjustright {
\par }{\b Initial Inventory Items
\par }{Initial inventory items are not contained in any of the three files that define the game, and must be entered at compile time.  Here are the initial settings for the three games I wrote:
\par 
\par Initial Inventory Items for GERMANY:
\par Colt 45, Rations, Uniform.
\par 
\par Initial Inventory Items for ASTEROID:
\par NONE
\par 
\par Initial Inventory Items for TIME:
\par Sword, Torch
\par 
\par }{\b LOC files
\par }{Here's a sample entry:
\par }\pard\plain \s15\widctlpar\adjustright \f2\fs20\cgrid {\f6 in a clearing in an old forest.
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\f6 1,PARACHUTE,255,2,1,255,255,255
\par }{
\par The first line is the description of the room.  The second line is: Number of items in this room, Items, room to the N, S, E, W, U, D.
\par Room numbers start with 0.  255 means no exit in that direction. The file ends with a ".END".
\par 
\par }{\b ADV files
\par }{Take a look at the Germany, Time, and Asteroid examples.  It is straight forward, but here's some explanation to get you going.
\par 
\par The adventure execution follows these steps:
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {
Wait for user input.  This is then parsed into a VERB and a NOUN.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {
Scan through the /ADV code looking for a verb block that matches this verb.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {
Inside the VB block can be NOUN blocks that only execute if the current NOUN matches one of the nouns inside the list.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {
The language includes commands for checking the users inventory, adding or removing items to rooms and inventory, simple variable support, etc.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {
There is also support for a code fragment that executes once after each user input.  This allows "background" actions, such as the sun rising or setting.
\par }\pard \widctlpar\adjustright {
\par Take a look at this code fragment:
\par }\pard\plain \s15\widctlpar\adjustright \f2\fs20\cgrid {
\par VB:HIDE,COVE
\par *BURY
\par NCHK
\par ?RM#2
\par N:TY:I see nowhere to hide it.
\par N:RET
\par NOUN:PARACHUTE
\par DEL:NOUN
\par INC HIDEP
\par TY:I cover it with leaves.
\par RET
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par "VB" means execute this code fragment if the verb matches one in this list.  Otherwise, go to the next "VB" block.
\par "*BURY" is a label named "BURY" that can be jumped to with the "JP" command.  For example:
\par }\pard\plain \s15\widctlpar\adjustright \f2\fs20\cgrid {
\par ?RM#2
\par Y:JP BURY
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Compares the current room number to 2.  If it is #2, then jump to BURY.
\par 
\par NCHK checks to see if the users inventory contains the current noun.  If not, the user will get an error message, and the cycle restarts.
\par ?RM compares the current room number.
\par N: or Y: can proceed any statement.  The statement won't be executed unless the result of the last comparison matches.
\par TY: types some text.
\par RET ends the current block and restarts the cycle (which starts by waiting for user input).
\par DEL removes an item from the inventory.  DEL: NOUN removes the current noun from inventory.
\par INC increments a variable or "flag".
\par 
\par There are many more statements, check out the example /ADV files on the AdvSrc.dsk.
\par 
\par }}